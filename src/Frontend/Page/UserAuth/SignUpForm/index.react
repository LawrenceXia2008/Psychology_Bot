/*
**   Antinux Innovation
**   Author: Eric Deng
*/
import React from 'react';
import { FormGroup , ControlLabel , FormControl , Checkbox } from 'react-bootstrap';
import ButtonControlPane from '../ButtonControlPane';
import style from 'style';

import { certRegExp , passwordRegExp } from 'regExp';

class SignUpForm extends React.PureComponent {
  static defaultProps = {
    initName: "",
    initPassword: ""
  }

  constructor( props ){
    super( props );
    this.state = {
      cert: props.initName,
      certValid: certRegExp.test( props.initName ),
      password: props.initPassword,
      passwordValid: passwordRegExp.test( props.initPassword ) && props.initPassword.length >= 8,
      passwordConfirm: ""
    };
  }

  render(){
    const {
      userExist,
      onCancel
    } = this.props;
    const {
      certValid,
      passwordValid,
      cert,
      password,
      passwordConfirm
    } = this.state;

    var certValidationState = null;
    var passwordValidationState = null;
    var confirmValidationState = null;
    var certPrompt = null;
    var passwordPrompt = null;
    var confirmPrompt = null;

    if( certValid && passwordValid ){
      passwordValidationState = "success";
      passwordPrompt = "ready";
      if( userExist ){
        certValidationState = "warning";
        certPrompt = "cert has been taken";
      }
      else {
        certValidationState = "success";
        certPrompt = "ready";
      }
      if( passwordConfirm ){
        if( passwordConfirm !== password ){
          confirmValidationState = "error";
          confirmPrompt = "password not match";
        }
        else {
          confirmValidationState = "success";
          confirmPrompt = "ready";
        }
      }
    }
    else {
      if( certValid !== null && !certValid ){
        certValidationState = "error";
        certPrompt = "cert can only contain letters , numbers and underscore _";
      }
      if( passwordValid !== null && !passwordValid ){
        passwordValidationState = "error";
        passwordPrompt = (
          <ul>
            <li>password must be longer than 8</li>
            <li>password must contain at least one of  {"{ * , @ , !}"} </li>
            <li>password must have at least one upper case</li>
          </ul>
        )
      }
      else {
        passwordValidationState = "success";
        passwordPrompt = "ready";
      }
    }

    return (
      <div className="fullSpaceBFC">
        <form>
          <FormGroup
            controlId="userSignupUserid"
            validationState={certValidationState}
            onSubmit={this.onLogin}

          >
            
            <FormControl
              type="text"
              value={cert}
              placeholder="输入用户名"
              onChange={this.inputUsername}
              onKeyDown={this.onKeyDown}
              className={style.username}
            />
            <FormControl.Feedback />
            {
              certPrompt
            }
          </FormGroup>
          <FormGroup
            controlId="userSignupPassword"
            validationState={passwordValidationState}
          >
           
            <FormControl
              type="password"
              value={password}
              placeholder="输入密码"
              onChange={this.inputPassword}
              onKeyDown={this.onKeyDown}
              className={style.pwd}
            />
            <FormControl.Feedback />
            
          </FormGroup>
          <FormGroup
            controlId="userSignupCofirm"
            validationState={confirmValidationState}
          >
            
            <FormControl
              type="password"
              value={passwordConfirm}
              placeholder="请再输入一次密码确认"
              onChange={this.inputConfirm}
              onKeyDown={this.onKeyDown}
              className={style.pwdAgain}
            />
            <FormControl.Feedback />
            {
              confirmPrompt
            }
          </FormGroup>
          <div class={style.btnPanel}>
            <ButtonControlPane
            mainAction={{
              action: this.onSignUp,
              text: "注册"
            }}
            additionalActions={[{
              action: onCancel,
              text: "取消"
            }]}
          />
          </div>
          
        </form>
      </div>
    );
  }

  onSignUp = () => {
    const { cert , password , passwordConfirm } = this.state;
    const certValid = certRegExp.test( cert );
    const passwordValid = passwordRegExp.test( password ) && password.length >= 8;
    if( passwordConfirm !== password ){
      return;
    }
    if( certValid && passwordValid ){
      this.props.onSignUp({
        cert,
        password
      });
    }
    this.setState({
      certValid,
      passwordValid
    });
  }

  onKeyDown = ev => {
    if( ev.key === 'Enter' ){
      this.onSignUp();
    }
  }

  inputUsername = ev => {
    const certValid = certRegExp.test( ev.target.value );
    this.setState({
      certValid,
      cert: ev.target.value
    });
  }

  inputPassword = ev => {
    const passwordValid = passwordRegExp.test( ev.target.value ) && ev.target.value.length >= 8;
    this.setState({
      passwordValid,
      password: ev.target.value
    });
  }

  inputConfirm = ev => {
    this.setState({
      passwordConfirm: ev.target.value
    });
  }
};

export default SignUpForm;
