import React from "react";

import Button from "direct-core/UI/Button";

import { connect } from "react-redux";

import { bindActionCreators } from "redux";

import * as actions from "actions";

import bufferToWav from "audiobuffer-to-wav";
import FontAwesomeIcon from '@fortawesome/react-fontawesome'
import faPhone from '@fortawesome/fontawesome-free-solid/faPhone'
import faSlash from '@fortawesome/fontawesome-free-solid/faPhoneSlash'
import style from "style"

const audioCtx = new AudioContext();

const reader = new FileReader();

var processingTime = 0;

const SpeechRecognition = webkitSpeechRecognition;

class AutoCatchAudio extends React.Component {

  recognition = new SpeechRecognition()

  state = {}

  constructor( props ){
    super( props );
    this.recognition.continuous = true;
    this.recognition.interimResults = true;
    this.recognition.lang = "zh-CN";

    this.recognition.onresult = ev => {
      const length = ev.results.length;
      const res = ev.results[length - 2] || ev.results[0];
      if( res.isFinal ){
        this.props.send({
                said: res[0].transcript
              })
        this.setState({
          said: res[0].transcript
        });
        fetch( "/api/getAnswer", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ text: res[0].transcript })
        }).then( response => {
          console.log( response );
          response.json().then(
            json => {
              console.log( json );
              this.setState({
                response: json.activities[1].text
              });
              this.props.send({
                response: json.activities[1].text
              })
            }
          )
        });

        this.recognition.stop();
        setTimeout( () => this.recognition.start() , 800 );
      }
    }
  }

  render(){
    const { response , said } = this.state;
    return (
      <div className={style.btnWrap}>
        <div
          onClick={this.recognition.start.bind( this.recognition )}
          className={style.startBtn}

        >
        <FontAwesomeIcon icon={faPhone} className={style.phoneIcon}/>
        </div>

        <div
          onClick={this.recognition.stop.bind( this.recognition )}
          className={style.stopBtn}
        >
        <FontAwesomeIcon icon={faSlash} className={style.slashIcon}/>
        </div>


      </div>
    );
  }
};

export default connect(
  state => ({

  }),
  dispatch => bindActionCreators( actions , dispatch )
)(AutoCatchAudio);
