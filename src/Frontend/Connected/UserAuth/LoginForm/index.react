/*
**   Antinux Innovation
**   Author: Eric Deng
*/
import React from 'react';
import { FormGroup , ControlLabel , FormControl , Checkbox } from 'react-bootstrap';
import ButtonControlPane from '../ButtonControlPane';
import style from 'style';
import { withRouter } from "react-router-dom";
import { certRegExp , passwordRegExp } from 'regExp';



class LoginForm extends React.PureComponent {
  static defaultProps = {
    initName: "",
    initPassword: ""
  }

  constructor( props ){
    super( props );
    this.state = {
      cert: props.initName,
      certValid: null,
      password: props.initPassword,
      passwordValid: null,
    };
  }

  render(){
    const {
      userNotExist,
      passwordWrong,
      onToggleRememberPassword,
      rememberPassword,
      onToggleKeepLogin,
      keepLogin,
      onCancel,
      a,
      b,
      goSignUp
    } = this.props;
    const {
      certValid,
      passwordValid,
      password,
      cert
    } = this.state;

    var certValidationState = null;
    var passwordValidationState = null;
    var certPrompt = null;
    var passwordPrompt = null;
    if( certValid && passwordValid ){
      if( userNotExist ){
        certValidationState = "warning";
        certPrompt = "cert not exist";
      }
      else {
        certValidationState = "success";
      }
      if( passwordWrong ){
        passwordValidationState = "error";
        passwordPrompt = "password wrong";
      }
    }
    else {
      if( certValid !== null && !certValid ){
        certValidationState = "error";
        certPrompt = "cert format is not correct";
      }
      if( passwordValid !== null && !passwordValid ){
        passwordValidationState = "error";
        passwordPrompt = "password format is not correct";
      }
    }

    return (
      <div className="fullSpaceBFC">
        <form>
          <FormGroup
            controlId="userLoginUsername"
            validationState={certValidationState}
            onSubmit={this.onLogin}
          >

            <FormControl
              type="text"
              value={a}
              className={style.inputText}
            />
            <FormControl.Feedback />
            {
              certPrompt
            }
          </FormGroup>
          <FormGroup
            controlId="userLoginPassword"
            validationState={passwordValidationState}
          >

            <FormControl
              type="text"
              value={b}
              className={style.inputPassword}
            />
            <FormControl.Feedback />
            {
              passwordPrompt
            }
          </FormGroup>
          <a href="#" className={style.forgetPwd}>忘记密码？</a>
          <div className={style.btnPanel}>
            <ButtonControlPane
            mainAction={{
              action: this.onLogin,
              text: "登录"
            }}
            additionalActions={[{
              action: goSignUp,
              text: "注册账号"
            }]}
          />
          </div>

        </form>
      </div>
    );
  }

  onLogin = () => {
    //const { cert , password } = this.state;
    //const certValid = certRegExp.test( cert );
    //const passwordValid = passwordRegExp.test( password ) && password.length >= //8;
    //if( certValid && passwordValid ){
    //  this.props.onLogin({
    //    cert,
    //    password
    //  });
    //}
    //this.setState({
    //  certValid,
    //  passwordValid
    //});
    this.props.history.push("/Phone");//跳转 by szy
  }

  onKeyDown = ev => {
    this.setState({
      certValid: null,
      passwordValid: null
    });
    if( ev.key === 'Enter' ){
      this.onLogin();
    }
  }

  inputUsername = ev => {
    this.setState({
      cert: ev.target.value
    });
  }

  inputPassword = ev => {
    this.setState({
      password: ev.target.value
    });
  }
};

export default withRouter( LoginForm );
